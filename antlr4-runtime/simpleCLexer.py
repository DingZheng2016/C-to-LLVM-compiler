# Generated from /Users/dingry/Documents/git/C-to-LLVM-compiler/simpleC.g4 by ANTLR 4.7.1
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\61")
        buf.write("\u0148\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3")
        buf.write("\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t")
        buf.write("\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\16")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\23\3\23\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\30")
        buf.write("\3\30\3\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\34")
        buf.write("\3\34\3\34\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 ")
        buf.write("\3 \3!\3!\3!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3#\3#\3#")
        buf.write("\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3%\3%\3&\3&\7&\u00e6\n")
        buf.write("&\f&\16&\u00e9\13&\3\'\6\'\u00ec\n\'\r\'\16\'\u00ed\3")
        buf.write("(\6(\u00f1\n(\r(\16(\u00f2\3(\3(\6(\u00f7\n(\r(\16(\u00f8")
        buf.write("\3)\3)\3)\3)\3*\3*\7*\u0101\n*\f*\16*\u0104\13*\3*\3*")
        buf.write("\3+\6+\u0109\n+\r+\16+\u010a\3+\3+\5+\u010f\n+\3,\3,\3")
        buf.write(",\3,\5,\u0115\n,\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u0122")
        buf.write("\n-\3.\3.\3.\3.\7.\u0128\n.\f.\16.\u012b\13.\3.\5.\u012e")
        buf.write("\n.\3.\3.\3.\3.\3/\3/\3/\3/\7/\u0138\n/\f/\16/\u013b\13")
        buf.write("/\3/\3/\3/\3/\3/\3\60\6\60\u0143\n\60\r\60\16\60\u0144")
        buf.write("\3\60\3\60\5\u0102\u0129\u0139\2\61\3\3\5\4\7\5\t\6\13")
        buf.write("\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37")
        buf.write("\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34")
        buf.write("\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_")
        buf.write("\61\3\2\b\5\2C\\aac|\6\2\62;C\\aac|\3\2\62;\4\2C\\c|\6")
        buf.write("\2##,-//\61\61\5\2\13\f\17\17\"\"\2\u0159\2\3\3\2\2\2")
        buf.write("\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r")
        buf.write("\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3")
        buf.write("\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2")
        buf.write("\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'")
        buf.write("\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2")
        buf.write("\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29")
        buf.write("\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2")
        buf.write("C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2")
        buf.write("\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2")
        buf.write("\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2")
        buf.write("\2\2\3a\3\2\2\2\5j\3\2\2\2\7l\3\2\2\2\tn\3\2\2\2\13p\3")
        buf.write("\2\2\2\rr\3\2\2\2\17t\3\2\2\2\21v\3\2\2\2\23x\3\2\2\2")
        buf.write("\25z\3\2\2\2\27|\3\2\2\2\31~\3\2\2\2\33\u0080\3\2\2\2")
        buf.write("\35\u0083\3\2\2\2\37\u0088\3\2\2\2!\u008e\3\2\2\2#\u0092")
        buf.write("\3\2\2\2%\u0099\3\2\2\2\'\u009b\3\2\2\2)\u009d\3\2\2\2")
        buf.write("+\u009f\3\2\2\2-\u00a1\3\2\2\2/\u00a3\3\2\2\2\61\u00a5")
        buf.write("\3\2\2\2\63\u00a8\3\2\2\2\65\u00ab\3\2\2\2\67\u00ae\3")
        buf.write("\2\2\29\u00b1\3\2\2\2;\u00b5\3\2\2\2=\u00bc\3\2\2\2?\u00c1")
        buf.write("\3\2\2\2A\u00c8\3\2\2\2C\u00cf\3\2\2\2E\u00d4\3\2\2\2")
        buf.write("G\u00db\3\2\2\2I\u00e1\3\2\2\2K\u00e3\3\2\2\2M\u00eb\3")
        buf.write("\2\2\2O\u00f0\3\2\2\2Q\u00fa\3\2\2\2S\u00fe\3\2\2\2U\u0108")
        buf.write("\3\2\2\2W\u0114\3\2\2\2Y\u0121\3\2\2\2[\u0123\3\2\2\2")
        buf.write("]\u0133\3\2\2\2_\u0142\3\2\2\2ab\7%\2\2bc\7k\2\2cd\7p")
        buf.write("\2\2de\7e\2\2ef\7n\2\2fg\7w\2\2gh\7f\2\2hi\7g\2\2i\4\3")
        buf.write("\2\2\2jk\7>\2\2k\6\3\2\2\2lm\7@\2\2m\b\3\2\2\2no\7*\2")
        buf.write("\2o\n\3\2\2\2pq\7+\2\2q\f\3\2\2\2rs\7}\2\2s\16\3\2\2\2")
        buf.write("tu\7\177\2\2u\20\3\2\2\2vw\7.\2\2w\22\3\2\2\2xy\7?\2\2")
        buf.write("y\24\3\2\2\2z{\7=\2\2{\26\3\2\2\2|}\7]\2\2}\30\3\2\2\2")
        buf.write("~\177\7_\2\2\177\32\3\2\2\2\u0080\u0081\7k\2\2\u0081\u0082")
        buf.write("\7h\2\2\u0082\34\3\2\2\2\u0083\u0084\7g\2\2\u0084\u0085")
        buf.write("\7n\2\2\u0085\u0086\7u\2\2\u0086\u0087\7g\2\2\u0087\36")
        buf.write("\3\2\2\2\u0088\u0089\7y\2\2\u0089\u008a\7j\2\2\u008a\u008b")
        buf.write("\7k\2\2\u008b\u008c\7n\2\2\u008c\u008d\7g\2\2\u008d \3")
        buf.write("\2\2\2\u008e\u008f\7h\2\2\u008f\u0090\7q\2\2\u0090\u0091")
        buf.write("\7t\2\2\u0091\"\3\2\2\2\u0092\u0093\7t\2\2\u0093\u0094")
        buf.write("\7g\2\2\u0094\u0095\7v\2\2\u0095\u0096\7w\2\2\u0096\u0097")
        buf.write("\7t\2\2\u0097\u0098\7p\2\2\u0098$\3\2\2\2\u0099\u009a")
        buf.write("\7#\2\2\u009a&\3\2\2\2\u009b\u009c\7,\2\2\u009c(\3\2\2")
        buf.write("\2\u009d\u009e\7\61\2\2\u009e*\3\2\2\2\u009f\u00a0\7\'")
        buf.write("\2\2\u00a0,\3\2\2\2\u00a1\u00a2\7-\2\2\u00a2.\3\2\2\2")
        buf.write("\u00a3\u00a4\7/\2\2\u00a4\60\3\2\2\2\u00a5\u00a6\7?\2")
        buf.write("\2\u00a6\u00a7\7?\2\2\u00a7\62\3\2\2\2\u00a8\u00a9\7#")
        buf.write("\2\2\u00a9\u00aa\7?\2\2\u00aa\64\3\2\2\2\u00ab\u00ac\7")
        buf.write(">\2\2\u00ac\u00ad\7?\2\2\u00ad\66\3\2\2\2\u00ae\u00af")
        buf.write("\7@\2\2\u00af\u00b0\7?\2\2\u00b08\3\2\2\2\u00b1\u00b2")
        buf.write("\7k\2\2\u00b2\u00b3\7p\2\2\u00b3\u00b4\7v\2\2\u00b4:\3")
        buf.write("\2\2\2\u00b5\u00b6\7f\2\2\u00b6\u00b7\7q\2\2\u00b7\u00b8")
        buf.write("\7w\2\2\u00b8\u00b9\7d\2\2\u00b9\u00ba\7n\2\2\u00ba\u00bb")
        buf.write("\7g\2\2\u00bb<\3\2\2\2\u00bc\u00bd\7e\2\2\u00bd\u00be")
        buf.write("\7j\2\2\u00be\u00bf\7c\2\2\u00bf\u00c0\7t\2\2\u00c0>\3")
        buf.write("\2\2\2\u00c1\u00c2\7u\2\2\u00c2\u00c3\7v\2\2\u00c3\u00c4")
        buf.write("\7t\2\2\u00c4\u00c5\7k\2\2\u00c5\u00c6\7p\2\2\u00c6\u00c7")
        buf.write("\7i\2\2\u00c7@\3\2\2\2\u00c8\u00c9\7u\2\2\u00c9\u00ca")
        buf.write("\7v\2\2\u00ca\u00cb\7t\2\2\u00cb\u00cc\7n\2\2\u00cc\u00cd")
        buf.write("\7g\2\2\u00cd\u00ce\7p\2\2\u00ceB\3\2\2\2\u00cf\u00d0")
        buf.write("\7c\2\2\u00d0\u00d1\7v\2\2\u00d1\u00d2\7q\2\2\u00d2\u00d3")
        buf.write("\7k\2\2\u00d3D\3\2\2\2\u00d4\u00d5\7r\2\2\u00d5\u00d6")
        buf.write("\7t\2\2\u00d6\u00d7\7k\2\2\u00d7\u00d8\7p\2\2\u00d8\u00d9")
        buf.write("\7v\2\2\u00d9\u00da\7h\2\2\u00daF\3\2\2\2\u00db\u00dc")
        buf.write("\7u\2\2\u00dc\u00dd\7e\2\2\u00dd\u00de\7c\2\2\u00de\u00df")
        buf.write("\7p\2\2\u00df\u00e0\7h\2\2\u00e0H\3\2\2\2\u00e1\u00e2")
        buf.write("\7(\2\2\u00e2J\3\2\2\2\u00e3\u00e7\t\2\2\2\u00e4\u00e6")
        buf.write("\t\3\2\2\u00e5\u00e4\3\2\2\2\u00e6\u00e9\3\2\2\2\u00e7")
        buf.write("\u00e5\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8L\3\2\2\2\u00e9")
        buf.write("\u00e7\3\2\2\2\u00ea\u00ec\t\4\2\2\u00eb\u00ea\3\2\2\2")
        buf.write("\u00ec\u00ed\3\2\2\2\u00ed\u00eb\3\2\2\2\u00ed\u00ee\3")
        buf.write("\2\2\2\u00eeN\3\2\2\2\u00ef\u00f1\t\4\2\2\u00f0\u00ef")
        buf.write("\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2\u00f0\3\2\2\2\u00f2")
        buf.write("\u00f3\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f6\7\60\2")
        buf.write("\2\u00f5\u00f7\t\4\2\2\u00f6\u00f5\3\2\2\2\u00f7\u00f8")
        buf.write("\3\2\2\2\u00f8\u00f6\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9")
        buf.write("P\3\2\2\2\u00fa\u00fb\7)\2\2\u00fb\u00fc\13\2\2\2\u00fc")
        buf.write("\u00fd\7)\2\2\u00fdR\3\2\2\2\u00fe\u0102\7$\2\2\u00ff")
        buf.write("\u0101\13\2\2\2\u0100\u00ff\3\2\2\2\u0101\u0104\3\2\2")
        buf.write("\2\u0102\u0103\3\2\2\2\u0102\u0100\3\2\2\2\u0103\u0105")
        buf.write("\3\2\2\2\u0104\u0102\3\2\2\2\u0105\u0106\7$\2\2\u0106")
        buf.write("T\3\2\2\2\u0107\u0109\t\5\2\2\u0108\u0107\3\2\2\2\u0109")
        buf.write("\u010a\3\2\2\2\u010a\u0108\3\2\2\2\u010a\u010b\3\2\2\2")
        buf.write("\u010b\u010e\3\2\2\2\u010c\u010d\7\60\2\2\u010d\u010f")
        buf.write("\7j\2\2\u010e\u010c\3\2\2\2\u010e\u010f\3\2\2\2\u010f")
        buf.write("V\3\2\2\2\u0110\u0111\7(\2\2\u0111\u0115\7(\2\2\u0112")
        buf.write("\u0113\7~\2\2\u0113\u0115\7~\2\2\u0114\u0110\3\2\2\2\u0114")
        buf.write("\u0112\3\2\2\2\u0115X\3\2\2\2\u0116\u0122\t\6\2\2\u0117")
        buf.write("\u0118\7?\2\2\u0118\u0122\7?\2\2\u0119\u011a\7#\2\2\u011a")
        buf.write("\u0122\7?\2\2\u011b\u0122\7>\2\2\u011c\u011d\7>\2\2\u011d")
        buf.write("\u0122\7?\2\2\u011e\u0122\7@\2\2\u011f\u0120\7@\2\2\u0120")
        buf.write("\u0122\7?\2\2\u0121\u0116\3\2\2\2\u0121\u0117\3\2\2\2")
        buf.write("\u0121\u0119\3\2\2\2\u0121\u011b\3\2\2\2\u0121\u011c\3")
        buf.write("\2\2\2\u0121\u011e\3\2\2\2\u0121\u011f\3\2\2\2\u0122Z")
        buf.write("\3\2\2\2\u0123\u0124\7\61\2\2\u0124\u0125\7\61\2\2\u0125")
        buf.write("\u0129\3\2\2\2\u0126\u0128\13\2\2\2\u0127\u0126\3\2\2")
        buf.write("\2\u0128\u012b\3\2\2\2\u0129\u012a\3\2\2\2\u0129\u0127")
        buf.write("\3\2\2\2\u012a\u012d\3\2\2\2\u012b\u0129\3\2\2\2\u012c")
        buf.write("\u012e\7\17\2\2\u012d\u012c\3\2\2\2\u012d\u012e\3\2\2")
        buf.write("\2\u012e\u012f\3\2\2\2\u012f\u0130\7\f\2\2\u0130\u0131")
        buf.write("\3\2\2\2\u0131\u0132\b.\2\2\u0132\\\3\2\2\2\u0133\u0134")
        buf.write("\7\61\2\2\u0134\u0135\7,\2\2\u0135\u0139\3\2\2\2\u0136")
        buf.write("\u0138\13\2\2\2\u0137\u0136\3\2\2\2\u0138\u013b\3\2\2")
        buf.write("\2\u0139\u013a\3\2\2\2\u0139\u0137\3\2\2\2\u013a\u013c")
        buf.write("\3\2\2\2\u013b\u0139\3\2\2\2\u013c\u013d\7,\2\2\u013d")
        buf.write("\u013e\7\61\2\2\u013e\u013f\3\2\2\2\u013f\u0140\b/\2\2")
        buf.write("\u0140^\3\2\2\2\u0141\u0143\t\7\2\2\u0142\u0141\3\2\2")
        buf.write("\2\u0143\u0144\3\2\2\2\u0144\u0142\3\2\2\2\u0144\u0145")
        buf.write("\3\2\2\2\u0145\u0146\3\2\2\2\u0146\u0147\b\60\2\2\u0147")
        buf.write("`\3\2\2\2\20\2\u00e7\u00ed\u00f2\u00f8\u0102\u010a\u010e")
        buf.write("\u0114\u0121\u0129\u012d\u0139\u0144\3\b\2\2")
        return buf.getvalue()


class simpleCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    ID = 37
    INT = 38
    DOUBLE = 39
    CHAR = 40
    STRING = 41
    LIB = 42
    Conjunction = 43
    Operator = 44
    LineComment = 45
    BlockComment = 46
    WS = 47

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'#include'", "'<'", "'>'", "'('", "')'", "'{'", "'}'", "','", 
            "'='", "';'", "'['", "']'", "'if'", "'else'", "'while'", "'for'", 
            "'return'", "'!'", "'*'", "'/'", "'%'", "'+'", "'-'", "'=='", 
            "'!='", "'<='", "'>='", "'int'", "'double'", "'char'", "'string'", 
            "'strlen'", "'atoi'", "'printf'", "'scanf'", "'&'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "DOUBLE", "CHAR", "STRING", "LIB", "Conjunction", 
            "Operator", "LineComment", "BlockComment", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "ID", "INT", "DOUBLE", 
                  "CHAR", "STRING", "LIB", "Conjunction", "Operator", "LineComment", 
                  "BlockComment", "WS" ]

    grammarFileName = "simpleC.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


