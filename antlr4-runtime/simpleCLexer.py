# Generated from /Users/dingry/Documents/git/C-to-LLVM-compiler/simpleC.g4 by ANTLR 4.7.1
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\62")
        buf.write("\u014f\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3")
        buf.write("\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16")
        buf.write("\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\23\3\23\3\24\3\24\3\25\3\25\3\26\3\26\3\27")
        buf.write("\3\27\3\30\3\30\3\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33")
        buf.write("\3\33\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3 \3 \3")
        buf.write(" \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3#\3#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3%\3%\3&\3&\3")
        buf.write("&\3&\3&\3\'\3\'\7\'\u00ed\n\'\f\'\16\'\u00f0\13\'\3(\6")
        buf.write("(\u00f3\n(\r(\16(\u00f4\3)\6)\u00f8\n)\r)\16)\u00f9\3")
        buf.write(")\3)\6)\u00fe\n)\r)\16)\u00ff\3*\3*\3*\3*\3+\3+\7+\u0108")
        buf.write("\n+\f+\16+\u010b\13+\3+\3+\3,\6,\u0110\n,\r,\16,\u0111")
        buf.write("\3,\3,\5,\u0116\n,\3-\3-\3-\3-\5-\u011c\n-\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\5.\u0129\n.\3/\3/\3/\3/\7/\u012f")
        buf.write("\n/\f/\16/\u0132\13/\3/\5/\u0135\n/\3/\3/\3/\3/\3\60\3")
        buf.write("\60\3\60\3\60\7\60\u013f\n\60\f\60\16\60\u0142\13\60\3")
        buf.write("\60\3\60\3\60\3\60\3\60\3\61\6\61\u014a\n\61\r\61\16\61")
        buf.write("\u014b\3\61\3\61\5\u0109\u0130\u0140\2\62\3\3\5\4\7\5")
        buf.write("\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35")
        buf.write("\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33")
        buf.write("\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[")
        buf.write("/]\60_\61a\62\3\2\b\5\2C\\aac|\6\2\62;C\\aac|\3\2\62;")
        buf.write("\4\2C\\c|\6\2##,-//\61\61\5\2\13\f\17\17\"\"\2\u0160\2")
        buf.write("\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3")
        buf.write("\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2")
        buf.write("\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2")
        buf.write("\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%")
        buf.write("\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2")
        buf.write("\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67")
        buf.write("\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2")
        buf.write("A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2")
        buf.write("\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2")
        buf.write("\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2")
        buf.write("\2\2\2_\3\2\2\2\2a\3\2\2\2\3c\3\2\2\2\5l\3\2\2\2\7n\3")
        buf.write("\2\2\2\tp\3\2\2\2\13r\3\2\2\2\rt\3\2\2\2\17v\3\2\2\2\21")
        buf.write("x\3\2\2\2\23z\3\2\2\2\25|\3\2\2\2\27~\3\2\2\2\31\u0080")
        buf.write("\3\2\2\2\33\u0082\3\2\2\2\35\u0085\3\2\2\2\37\u008a\3")
        buf.write("\2\2\2!\u0090\3\2\2\2#\u0094\3\2\2\2%\u009b\3\2\2\2\'")
        buf.write("\u009d\3\2\2\2)\u009f\3\2\2\2+\u00a1\3\2\2\2-\u00a3\3")
        buf.write("\2\2\2/\u00a5\3\2\2\2\61\u00a7\3\2\2\2\63\u00aa\3\2\2")
        buf.write("\2\65\u00ad\3\2\2\2\67\u00b0\3\2\2\29\u00b3\3\2\2\2;\u00b7")
        buf.write("\3\2\2\2=\u00be\3\2\2\2?\u00c3\3\2\2\2A\u00ca\3\2\2\2")
        buf.write("C\u00d1\3\2\2\2E\u00d6\3\2\2\2G\u00dd\3\2\2\2I\u00e3\3")
        buf.write("\2\2\2K\u00e5\3\2\2\2M\u00ea\3\2\2\2O\u00f2\3\2\2\2Q\u00f7")
        buf.write("\3\2\2\2S\u0101\3\2\2\2U\u0105\3\2\2\2W\u010f\3\2\2\2")
        buf.write("Y\u011b\3\2\2\2[\u0128\3\2\2\2]\u012a\3\2\2\2_\u013a\3")
        buf.write("\2\2\2a\u0149\3\2\2\2cd\7%\2\2de\7k\2\2ef\7p\2\2fg\7e")
        buf.write("\2\2gh\7n\2\2hi\7w\2\2ij\7f\2\2jk\7g\2\2k\4\3\2\2\2lm")
        buf.write("\7>\2\2m\6\3\2\2\2no\7@\2\2o\b\3\2\2\2pq\7*\2\2q\n\3\2")
        buf.write("\2\2rs\7+\2\2s\f\3\2\2\2tu\7}\2\2u\16\3\2\2\2vw\7\177")
        buf.write("\2\2w\20\3\2\2\2xy\7.\2\2y\22\3\2\2\2z{\7=\2\2{\24\3\2")
        buf.write("\2\2|}\7?\2\2}\26\3\2\2\2~\177\7]\2\2\177\30\3\2\2\2\u0080")
        buf.write("\u0081\7_\2\2\u0081\32\3\2\2\2\u0082\u0083\7k\2\2\u0083")
        buf.write("\u0084\7h\2\2\u0084\34\3\2\2\2\u0085\u0086\7g\2\2\u0086")
        buf.write("\u0087\7n\2\2\u0087\u0088\7u\2\2\u0088\u0089\7g\2\2\u0089")
        buf.write("\36\3\2\2\2\u008a\u008b\7y\2\2\u008b\u008c\7j\2\2\u008c")
        buf.write("\u008d\7k\2\2\u008d\u008e\7n\2\2\u008e\u008f\7g\2\2\u008f")
        buf.write(" \3\2\2\2\u0090\u0091\7h\2\2\u0091\u0092\7q\2\2\u0092")
        buf.write("\u0093\7t\2\2\u0093\"\3\2\2\2\u0094\u0095\7t\2\2\u0095")
        buf.write("\u0096\7g\2\2\u0096\u0097\7v\2\2\u0097\u0098\7w\2\2\u0098")
        buf.write("\u0099\7t\2\2\u0099\u009a\7p\2\2\u009a$\3\2\2\2\u009b")
        buf.write("\u009c\7#\2\2\u009c&\3\2\2\2\u009d\u009e\7,\2\2\u009e")
        buf.write("(\3\2\2\2\u009f\u00a0\7\61\2\2\u00a0*\3\2\2\2\u00a1\u00a2")
        buf.write("\7\'\2\2\u00a2,\3\2\2\2\u00a3\u00a4\7-\2\2\u00a4.\3\2")
        buf.write("\2\2\u00a5\u00a6\7/\2\2\u00a6\60\3\2\2\2\u00a7\u00a8\7")
        buf.write("?\2\2\u00a8\u00a9\7?\2\2\u00a9\62\3\2\2\2\u00aa\u00ab")
        buf.write("\7#\2\2\u00ab\u00ac\7?\2\2\u00ac\64\3\2\2\2\u00ad\u00ae")
        buf.write("\7>\2\2\u00ae\u00af\7?\2\2\u00af\66\3\2\2\2\u00b0\u00b1")
        buf.write("\7@\2\2\u00b1\u00b2\7?\2\2\u00b28\3\2\2\2\u00b3\u00b4")
        buf.write("\7k\2\2\u00b4\u00b5\7p\2\2\u00b5\u00b6\7v\2\2\u00b6:\3")
        buf.write("\2\2\2\u00b7\u00b8\7f\2\2\u00b8\u00b9\7q\2\2\u00b9\u00ba")
        buf.write("\7w\2\2\u00ba\u00bb\7d\2\2\u00bb\u00bc\7n\2\2\u00bc\u00bd")
        buf.write("\7g\2\2\u00bd<\3\2\2\2\u00be\u00bf\7e\2\2\u00bf\u00c0")
        buf.write("\7j\2\2\u00c0\u00c1\7c\2\2\u00c1\u00c2\7t\2\2\u00c2>\3")
        buf.write("\2\2\2\u00c3\u00c4\7u\2\2\u00c4\u00c5\7v\2\2\u00c5\u00c6")
        buf.write("\7t\2\2\u00c6\u00c7\7k\2\2\u00c7\u00c8\7p\2\2\u00c8\u00c9")
        buf.write("\7i\2\2\u00c9@\3\2\2\2\u00ca\u00cb\7u\2\2\u00cb\u00cc")
        buf.write("\7v\2\2\u00cc\u00cd\7t\2\2\u00cd\u00ce\7n\2\2\u00ce\u00cf")
        buf.write("\7g\2\2\u00cf\u00d0\7p\2\2\u00d0B\3\2\2\2\u00d1\u00d2")
        buf.write("\7c\2\2\u00d2\u00d3\7v\2\2\u00d3\u00d4\7q\2\2\u00d4\u00d5")
        buf.write("\7k\2\2\u00d5D\3\2\2\2\u00d6\u00d7\7r\2\2\u00d7\u00d8")
        buf.write("\7t\2\2\u00d8\u00d9\7k\2\2\u00d9\u00da\7p\2\2\u00da\u00db")
        buf.write("\7v\2\2\u00db\u00dc\7h\2\2\u00dcF\3\2\2\2\u00dd\u00de")
        buf.write("\7u\2\2\u00de\u00df\7e\2\2\u00df\u00e0\7c\2\2\u00e0\u00e1")
        buf.write("\7p\2\2\u00e1\u00e2\7h\2\2\u00e2H\3\2\2\2\u00e3\u00e4")
        buf.write("\7(\2\2\u00e4J\3\2\2\2\u00e5\u00e6\7i\2\2\u00e6\u00e7")
        buf.write("\7g\2\2\u00e7\u00e8\7v\2\2\u00e8\u00e9\7u\2\2\u00e9L\3")
        buf.write("\2\2\2\u00ea\u00ee\t\2\2\2\u00eb\u00ed\t\3\2\2\u00ec\u00eb")
        buf.write("\3\2\2\2\u00ed\u00f0\3\2\2\2\u00ee\u00ec\3\2\2\2\u00ee")
        buf.write("\u00ef\3\2\2\2\u00efN\3\2\2\2\u00f0\u00ee\3\2\2\2\u00f1")
        buf.write("\u00f3\t\4\2\2\u00f2\u00f1\3\2\2\2\u00f3\u00f4\3\2\2\2")
        buf.write("\u00f4\u00f2\3\2\2\2\u00f4\u00f5\3\2\2\2\u00f5P\3\2\2")
        buf.write("\2\u00f6\u00f8\t\4\2\2\u00f7\u00f6\3\2\2\2\u00f8\u00f9")
        buf.write("\3\2\2\2\u00f9\u00f7\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa")
        buf.write("\u00fb\3\2\2\2\u00fb\u00fd\7\60\2\2\u00fc\u00fe\t\4\2")
        buf.write("\2\u00fd\u00fc\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff\u00fd")
        buf.write("\3\2\2\2\u00ff\u0100\3\2\2\2\u0100R\3\2\2\2\u0101\u0102")
        buf.write("\7)\2\2\u0102\u0103\13\2\2\2\u0103\u0104\7)\2\2\u0104")
        buf.write("T\3\2\2\2\u0105\u0109\7$\2\2\u0106\u0108\13\2\2\2\u0107")
        buf.write("\u0106\3\2\2\2\u0108\u010b\3\2\2\2\u0109\u010a\3\2\2\2")
        buf.write("\u0109\u0107\3\2\2\2\u010a\u010c\3\2\2\2\u010b\u0109\3")
        buf.write("\2\2\2\u010c\u010d\7$\2\2\u010dV\3\2\2\2\u010e\u0110\t")
        buf.write("\5\2\2\u010f\u010e\3\2\2\2\u0110\u0111\3\2\2\2\u0111\u010f")
        buf.write("\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u0115\3\2\2\2\u0113")
        buf.write("\u0114\7\60\2\2\u0114\u0116\7j\2\2\u0115\u0113\3\2\2\2")
        buf.write("\u0115\u0116\3\2\2\2\u0116X\3\2\2\2\u0117\u0118\7(\2\2")
        buf.write("\u0118\u011c\7(\2\2\u0119\u011a\7~\2\2\u011a\u011c\7~")
        buf.write("\2\2\u011b\u0117\3\2\2\2\u011b\u0119\3\2\2\2\u011cZ\3")
        buf.write("\2\2\2\u011d\u0129\t\6\2\2\u011e\u011f\7?\2\2\u011f\u0129")
        buf.write("\7?\2\2\u0120\u0121\7#\2\2\u0121\u0129\7?\2\2\u0122\u0129")
        buf.write("\7>\2\2\u0123\u0124\7>\2\2\u0124\u0129\7?\2\2\u0125\u0129")
        buf.write("\7@\2\2\u0126\u0127\7@\2\2\u0127\u0129\7?\2\2\u0128\u011d")
        buf.write("\3\2\2\2\u0128\u011e\3\2\2\2\u0128\u0120\3\2\2\2\u0128")
        buf.write("\u0122\3\2\2\2\u0128\u0123\3\2\2\2\u0128\u0125\3\2\2\2")
        buf.write("\u0128\u0126\3\2\2\2\u0129\\\3\2\2\2\u012a\u012b\7\61")
        buf.write("\2\2\u012b\u012c\7\61\2\2\u012c\u0130\3\2\2\2\u012d\u012f")
        buf.write("\13\2\2\2\u012e\u012d\3\2\2\2\u012f\u0132\3\2\2\2\u0130")
        buf.write("\u0131\3\2\2\2\u0130\u012e\3\2\2\2\u0131\u0134\3\2\2\2")
        buf.write("\u0132\u0130\3\2\2\2\u0133\u0135\7\17\2\2\u0134\u0133")
        buf.write("\3\2\2\2\u0134\u0135\3\2\2\2\u0135\u0136\3\2\2\2\u0136")
        buf.write("\u0137\7\f\2\2\u0137\u0138\3\2\2\2\u0138\u0139\b/\2\2")
        buf.write("\u0139^\3\2\2\2\u013a\u013b\7\61\2\2\u013b\u013c\7,\2")
        buf.write("\2\u013c\u0140\3\2\2\2\u013d\u013f\13\2\2\2\u013e\u013d")
        buf.write("\3\2\2\2\u013f\u0142\3\2\2\2\u0140\u0141\3\2\2\2\u0140")
        buf.write("\u013e\3\2\2\2\u0141\u0143\3\2\2\2\u0142\u0140\3\2\2\2")
        buf.write("\u0143\u0144\7,\2\2\u0144\u0145\7\61\2\2\u0145\u0146\3")
        buf.write("\2\2\2\u0146\u0147\b\60\2\2\u0147`\3\2\2\2\u0148\u014a")
        buf.write("\t\7\2\2\u0149\u0148\3\2\2\2\u014a\u014b\3\2\2\2\u014b")
        buf.write("\u0149\3\2\2\2\u014b\u014c\3\2\2\2\u014c\u014d\3\2\2\2")
        buf.write("\u014d\u014e\b\61\2\2\u014eb\3\2\2\2\20\2\u00ee\u00f4")
        buf.write("\u00f9\u00ff\u0109\u0111\u0115\u011b\u0128\u0130\u0134")
        buf.write("\u0140\u014b\3\b\2\2")
        return buf.getvalue()


class simpleCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    ID = 38
    INT = 39
    DOUBLE = 40
    CHAR = 41
    STRING = 42
    LIB = 43
    Conjunction = 44
    Operator = 45
    LineComment = 46
    BlockComment = 47
    WS = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'#include'", "'<'", "'>'", "'('", "')'", "'{'", "'}'", "','", 
            "';'", "'='", "'['", "']'", "'if'", "'else'", "'while'", "'for'", 
            "'return'", "'!'", "'*'", "'/'", "'%'", "'+'", "'-'", "'=='", 
            "'!='", "'<='", "'>='", "'int'", "'double'", "'char'", "'string'", 
            "'strlen'", "'atoi'", "'printf'", "'scanf'", "'&'", "'gets'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "DOUBLE", "CHAR", "STRING", "LIB", "Conjunction", 
            "Operator", "LineComment", "BlockComment", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "ID", "INT", 
                  "DOUBLE", "CHAR", "STRING", "LIB", "Conjunction", "Operator", 
                  "LineComment", "BlockComment", "WS" ]

    grammarFileName = "simpleC.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


